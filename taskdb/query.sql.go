// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package taskdb

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, desc, duration) VALUES (?, ?, ?) RETURNING id, title, "desc", duration, created_at
`

type CreateTaskParams struct {
	Title    string
	Desc     string
	Duration int64
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Title, arg.Desc, arg.Duration)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Desc,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, title, "desc", duration, created_at FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Desc,
			&i.Duration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTasksByDate = `-- name: GetAllTasksByDate :many
SELECT id, title, "desc", duration, created_at FROM tasks where date(created_at) = date(?)
`

func (q *Queries) GetAllTasksByDate(ctx context.Context, date interface{}) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasksByDate, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Desc,
			&i.Duration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskDuration = `-- name: UpdateTaskDuration :one
UPDATE tasks SET duration = ? where id = ? RETURNING id, title, "desc", duration, created_at
`

type UpdateTaskDurationParams struct {
	Duration int64
	ID       int64
}

func (q *Queries) UpdateTaskDuration(ctx context.Context, arg UpdateTaskDurationParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskDuration, arg.Duration, arg.ID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Desc,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}
